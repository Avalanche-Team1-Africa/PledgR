issues:
  - title: "Professionalize the README.md"
    body: |
      üß† A README is the first impression of your project. Let‚Äôs make it look like it belongs in a real Web3 startup repo.

      **Checklist:**
      - [ ] Add a project title and one-liner description
      - [ ] Include tech stack badges (e.g., Solidity, Avalanche, Next.js, etc.)
      - [ ] Describe the problem the dApp solves
      - [ ] Add setup & run instructions (`npm install`, `hardhat compile`, etc.)
      - [ ] Add screenshots or GIF demos
      - [ ] Add link to deployed app (if available)
      - [ ] Add Avalanche Core wallet connection instructions
      - [ ] Add contract address and link to https://snowtrace.io/

      **Reference:** https://www.makeareadme.com/
    labels: ["documentation", "good first issue", "bounty"]

  - title: "Ensure Contract Is Verified on Snowtrace (Fuji or Mainnet)"
    body: |
      üí° Having your contract verified on Snowtrace allows users to read and interact with it securely.

      **Checklist:**
      - [ ] Add a `verify.js` script to your `scripts/` directory using Hardhat Etherscan plugin
      - [ ] Get a Snowtrace API Key: https://snowtrace.io/myapikey
      - [ ] Add contract verification instructions to the README
      - [ ] Verify the contract on https://testnet.snowtrace.io or Mainnet

      **Bonus:** Add a badge to README: Verified on Snowtrace ‚úÖ
    labels: ["smart contract", "bounty", "avalanche", "solidity"]

  - title: "Setup Core Wallet Compatibility in Frontend"
    body: |
      üîê Every Avalanche dApp should integrate Core Wallet for a smooth and secure experience.

      **Checklist:**
      - [ ] Install Core Wallet SDK or use Ethers.js with `window.ethereum`
      - [ ] Add Core support (consider UI fallback for Metamask users)
      - [ ] Add "Connect Wallet" button with user address displayed
      - [ ] Add wallet status to the navbar/header

      **Resources:**
      - Avalanche Wallet Integration Docs: https://build.avax.network/docs/tools/core/wallet/sdk/
      - Ethers.js Integration: https://build.avax.network/docs/dapps/wallet-connect/
    labels: ["frontend", "wallet", "avalanche", "web3", "good first issue"]

  - title: "Organize Codebase & Add Comments"
    body: |
      üßπ Clean code = confident team. Let's prepare this project for real-world maintainers.

      **Checklist:**
      - [ ] Move smart contracts to `/contracts`
      - [ ] Scripts to `/scripts` and add explanations at the top
      - [ ] Use `.env` for secrets & RPCs (never commit private keys)
      - [ ] Add inline comments to Solidity code
      - [ ] Clean unused imports, dead variables

      **Bonus:** Add code commenting guide in CONTRIBUTING.md
    labels: ["refactor", "clean code", "good first issue", "bounty"]

  - title: "Add .env.sample File & Explain All Environment Variables"
    body: |
      üì¶ Every serious dev repo should have a `.env.sample` to avoid confusion and config hell.

      **Checklist:**
      - [ ] Create `.env.sample` with dummy values
      - [ ] Add explanations to each variable (in comments)
      - [ ] Document usage in README setup instructions

      **Example:**
      ```
      PRIVATE_KEY=your_wallet_private_key
      API_URL=https://api.avax-test.network/ext/bc/C/rpc
      ```
    labels: ["tooling", "config", "developer-experience"]

  - title: "Implement Chain & Network Switch Detection"
    body: |
      üß† This ensures the user is connected to the correct Avalanche network (Fuji/Mainnet).

      **Checklist:**
      - [ ] Use Ethers.js or Web3.js to detect `chainId`
      - [ ] Show an error if user is on the wrong network
      - [ ] Provide a ‚ÄúSwitch Network‚Äù prompt via Core Wallet

      **Reference:**
      ```js
      if (window.ethereum.chainId !== '0xa869') {
        // Prompt switch to Fuji
      }
      ```
    labels: ["frontend", "web3", "avalanche", "connectivity", "interoperability"]

  - title: "Host & Deploy the Frontend"
    body: |
      üåç A dApp without a live frontend is invisible. Get it out there!

      **Checklist:**
      - [ ] Deploy frontend using Vercel, Netlify, or Render
      - [ ] Add environment variables to deployment settings
      - [ ] Add deployed link to README + project dashboard
      - [ ] Add meta title, favicon, and basic SEO tags
    labels: ["deployment", "vercel", "render", "production-ready"]

  - title: "Create CONTRIBUTING.md and LICENSE"
    body: |
      üìú Proper OSS etiquette: tell people how to contribute, and what license your code is under.

      **Checklist:**
      - [ ] Add CONTRIBUTING.md explaining:
        - Branching convention
        - PR guidelines
        - Code style (Prettier? Lint?)
      - [ ] Add MIT License file or license of your choice

      **Resource:** https://choosealicense.com/
    labels: ["OSS practices", "open source", "best practices"]

  - title: "Add Team & Role Breakdown in README"
    body: |
      ü§ù Shows who's doing what ‚Äî encourages ownership.

      **Checklist:**
      - [ ] Add team member names & roles (Frontend, Smart Contract, PM, etc.)
      - [ ] Link to their GitHub/LinkedIn if possible
      - [ ] Mention how the team is dividing responsibilities
    labels: ["community", "collaboration", "documentation", "transparency"]
